predicate valid_state(heap: IArray, gv: Ref, state: Ref) {
    acc(state.device) && state.device == 42 && other_pred(heap, gv, state) && seq_pred(heap, gv, state)
}

predicate other_pred(heap: IArray, gv: Ref, state: Ref) {
    acc(state.device2) && state.device2 >= 0 && acc(state.device3) && acc(slot(state.device3, 0).local_mem) && slot(state.device3, 0).local_mem == 17
}

predicate seq_pred(heap: IArray, gv: Ref, state: Ref) {
    acc(state.device4) && |state.device4| == 2 && state.device4[0] == false && state.device4[1] == false
}

predicate valid_device(heap: IArray, gv: Ref, device_v: Ref) {
    true
}

predicate some_pred(heap: IArray, gv: Ref, device_v: Ref) {
    true
}

method microkit_notify(heap: IArray, gv: Ref, x1: Int, x2: Int, x3: Int, x4: Int)

field device: Int
field device2: Int
field device3: IArray
field device4: Seq[Bool]
field device5: Ref

method store_base8(heap: IArray, gv: Ref, state: Ref, address: Int, value: Int)
    requires 0 == address
    requires 0 <= value < 256

method store_base16(heap: IArray, gv: Ref, state: Ref, address: Int, value: Int)
    requires address == 0
    requires 0 <= value < 256 * 256

method store_base32(heap: IArray, gv: Ref, state: Ref, address: Int, value: Int)
    requires address == 0
    requires 0 <= value < 4294967296

method store_base64(heap: IArray, gv: Ref, state: Ref, address: Int, value: Int)
    requires address == 0
    requires 0 <= value < 4294967296 * 4294967296

method load_base8(heap: IArray, gv: Ref, state: Ref, address: Int) returns (retval: Int)
    requires 0 == address
    ensures 0 <= retval < 256

method load_base16(heap: IArray, gv: Ref, state: Ref, address: Int) returns (retval: Int)
    requires address == 0
    ensures 0 <= retval < 256 * 256

method load_base32(heap: IArray, gv: Ref, state: Ref, address: Int) returns (retval: Int)
    requires address == 0
    ensures 0 <= retval < 4294967296

method load_base64(heap: IArray, gv: Ref, state: Ref, address: Int) returns (retval: Int)
    requires address == 0
    ensures 0 <= retval < 4294967296 * 4294967296

method store_align(heap: IArray, gv: Ref, address: Int, value: Int)
    requires address == 4
    requires 0 <= value < 4294967296

method load_align(heap: IArray, gv: Ref, address: Int) returns (retval: Int)
    requires address == 4
    ensures 0 <= retval < 4294967296

method store_A(heap: IArray, gv: Ref, state: Ref, address: Int, value: Int)
    requires 200 <= address < 208
    requires 0 <= value < 4294967296 * 4294967296

method load_A(heap: IArray, gv: Ref, state: Ref, address: Int) returns (retval: Int)
    requires 200 <= address < 208
    ensures 0 <= retval < 4294967296 * 4294967296

method store_B(heap: IArray, gv: Ref, state: Ref, address: Int, value: Int)
    requires address == 100
    requires 0 <= value < 256

method load_B(heap: IArray, gv: Ref, state: Ref, address: Int) returns (retval: Int)
    requires address == 100
    ensures 0 <= retval < 256

method store_STRIDE(heap: IArray, gv: Ref, state: Ref, address: Int, value: Int)
    requires 1056 <= address && address < 1120 && address % 16 == 0
    requires 0 <= value < 256

method load_STRIDE(heap: IArray, gv: Ref, state: Ref, address: Int) returns (retval: Int)
    requires 1056 <= address && address < 1120 && address % 16 == 0
    ensures 0 <= retval < 256

// 16 bits test

field device_base_low: Int
field device_base_high: Int

predicate state_16_bit(heap: IArray, gv: Ref, state: Ref) {
    acc(state.device_base_low) && acc(state.device_base_high) && 0 <= state.device_base_low < 256 && 0 <= state.device_base_high < 256
}

method store_base8_16(heap: IArray, gv: Ref, state: Ref, address: Int, value: Int)
    requires state_16_bit(heap, gv, state)
    requires 0 <= address <= 1
    requires 0 <= value < 256
    ensures state_16_bit(heap,  gv, state)
    ensures unfolding state_16_bit(heap, gv, state) in (address == 0 ==> state.device_base_low == value && old(unfolding state_16_bit(heap, gv, state) in state.device_base_high) == state.device_base_high)
    ensures unfolding state_16_bit(heap, gv, state) in (address == 1 ==> state.device_base_high == value && old(unfolding state_16_bit(heap, gv, state) in state.device_base_low) == state.device_base_low)
{
    unfold state_16_bit(heap, gv, state)
    if (address == 0) {
        state.device_base_low := value
    } else {
        state.device_base_high := value
    }
    fold state_16_bit(heap, gv, state)
}

method store_base16_16(heap: IArray, gv: Ref, state: Ref, address: Int, value: Int)
    requires state_16_bit(heap, gv, state)
    requires address == 0
    requires 0 <= value < 65536
    ensures state_16_bit(heap, gv, state)
    ensures unfolding state_16_bit(heap, gv, state) in state.device_base_low == value % 256 && state.device_base_high == value / 256
{
    unfold state_16_bit(heap, gv, state)
    state.device_base_low := value % 256
    state.device_base_high := value / 256
    fold state_16_bit(heap, gv, state)
}

method load_base8_16(heap: IArray, gv: Ref, state: Ref, address: Int) returns (retval: Int)
    requires state_16_bit(heap, gv, state)
    requires 0 <= address <= 1
    ensures state_16_bit(heap, gv, state)
    ensures 0 <= retval < 256
    ensures (unfolding state_16_bit(heap, gv, state) in state.device_base_low) == old(unfolding state_16_bit(heap, gv, state) in state.device_base_low)
    ensures (unfolding state_16_bit(heap, gv, state) in state.device_base_high) == old(unfolding state_16_bit(heap, gv, state) in state.device_base_high)
    ensures unfolding state_16_bit(heap, gv, state) in address == 0 ==> retval == state.device_base_low
    ensures unfolding state_16_bit(heap, gv, state) in address == 1 ==> retval == state.device_base_high
{
    unfold state_16_bit(heap, gv, state)
    if (address == 0) {
        retval := state.device_base_low
    } else {
        retval := state.device_base_high
    }
    fold state_16_bit(heap, gv, state)

}

method load_base16_16(heap: IArray, gv: Ref, state: Ref, address: Int) returns (retval: Int)
    requires state_16_bit(heap, gv, state)
    requires 0 == address
    ensures state_16_bit(heap, gv, state)
    ensures 0 <= retval < 65536
    ensures (unfolding state_16_bit(heap, gv, state) in state.device_base_low) == old(unfolding state_16_bit(heap, gv, state) in state.device_base_low)
    ensures (unfolding state_16_bit(heap, gv, state) in state.device_base_high) == old(unfolding state_16_bit(heap, gv, state) in state.device_base_high)
    ensures unfolding state_16_bit(heap, gv, state) in (retval == state.device_base_low + state.device_base_high * 256)
{
    unfold state_16_bit(heap, gv, state)
    retval := state.device_base_low + state.device_base_high * 256
    fold state_16_bit(heap, gv, state)
}

